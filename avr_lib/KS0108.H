
#define  GLCD_DataDDR  DDRC
#define  GLCD_DataPort  PORTC
#define  GLCD_COMDDR DDRA
#define  GLCD_COMPort  PORTA
/*******************/
#define GLCD_CS1L GLCD_COMPort&=~(1<<5)
#define GLCD_CS2L GLCD_COMPort&=~(1<<4)
#define GLCD_RSL  GLCD_COMPort&=~(1<<3)
#define GLCD_RWL  GLCD_COMPort&=~(1<<2)
#define GLCD_RSTL GLCD_COMPort&=~(1<<1)
#define GLCD_ENL  GLCD_COMPort&=~(1<<0)

#define GLCD_CS1H GLCD_COMPort|=(1<<5)
#define GLCD_CS2H GLCD_COMPort|=(1<<4)
#define GLCD_RSH GLCD_COMPort|=(1<<3)
#define GLCD_RWH  GLCD_COMPort|=(1<<2)
#define GLCD_RSTH GLCD_COMPort|=(1<<1)
#define GLCD_ENH  GLCD_COMPort|=(1<<0)


/*******************/
void comand(int date);
void date(int date);
void glsdinit(void);
void DelayMs(unsigned int msec);
void vline(int x1,int y1,int y2);
void hline(int x1,int y1,int x2);
void box(int x1,int x2,int y1,int y2);
void Gchar(int x1,int y1,unsigned char chr,int q);
void Gstr(int x1,int y1,unsigned char* str,int q);
/******* comand ************/
void comand(int date)
{
GLCD_RSL;
GLCD_DataPort=date;
_delay_us(10);
GLCD_ENH;
GLCD_ENL;
_delay_us(10);
}
/******* data ***********/
void date(int date)
{
GLCD_RSH;
GLCD_DataPort=date;
_delay_us(10);
GLCD_ENH;
GLCD_ENL;
_delay_us(10);
}
/******* init ***********/
void glsdinit()
{
GLCD_DataDDR =0XFF;
GLCD_COMDDR=0XFF;
GLCD_DataPort =0X00;
GLCD_COMPort=0X00;
GLCD_RSTH;
 GLCD_RSL;
 GLCD_RWL;
 GLCD_ENL;
 _delay_us(10);
 comand(184);
 _delay_us(10);
 comand(64);
_delay_us(10);
}
/********* vertical line *********/ 
void vline(int x1,int y1,int y2)
{
 int a,b,c=1,d,i,dx,e;
 dx=0;
 b=0;
 if(x1<64) {
 GLCD_CS1H;
 GLCD_CS2L;
 e=x1;
 }
 if(x1>63) {
 GLCD_CS1L;
 GLCD_CS2H;
 e=x1-64;
 }
    if(y1>8)
	  {
        a=y1;
        while(a>8)
		     {
              a=a-8;
              b=b+1;
             }
      }
    if(y1<8) a=y1;
    for(i=1;i<a;i++) c=c*2;
    d=c;
	 for(i=0;i<y2;i++)
	   {
        comand(184+b+dx);
        comand(64+e);
        date(d);
        c=c*2;
        d=d+c;
        if(d>256)dx=dx+1,d=1,c=1;
       }
}
/********* horisontal line ***********/
void hline(int x1,int y1,int x2)
{
 int i;
     for(i=x1;i<x2;i++)
        {
         vline(i,y1,1);
		 
		}
}
/********* box ***********/
void box(int x1,int x2,int y1,int y2)
{
 hline(x1,y1,x2);
 hline(x1,y1+y2,x2);
 if(y2<60) y2=y2+1;
 vline(x1,y1,y2);
 vline(x2,y1,y2);
}
/********* char ***********/
void Gchar(int x1,int y1,unsigned char chr,int q)
{ 
char font5x7[][6] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},// (space)
{0x00, 0x00, 0x5F, 0x00, 0x00, 0x00},// !
{0x00, 0x07, 0x00, 0x07, 0x00, 0x00},// "
{0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00},// #
{0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00},// $
{0x23, 0x13, 0x08, 0x64, 0x62, 0x00},// %
{0x36, 0x49, 0x55, 0x22, 0x50, 0x00},// &
{0x00, 0x05, 0x03, 0x00, 0x00, 0x00},// '
{0x00, 0x1C, 0x22, 0x41, 0x00, 0x00},// (
{0x00, 0x41, 0x22, 0x1C, 0x00, 0x00},// )
{0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00},// *
{0x08, 0x08, 0x3E, 0x08, 0x08, 0x00},// +
{0x00, 0x50, 0x30, 0x00, 0x00, 0x00},// ,
{0x08, 0x08, 0x08, 0x08, 0x08, 0x00},// -
{0x00, 0x30, 0x30, 0x00, 0x00, 0x00},// .
{0x20, 0x10, 0x08, 0x04, 0x02, 0x00},// /
{0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00},// 0
{0x00, 0x42, 0x7F, 0x40, 0x00, 0x00},// 1
{0x42, 0x61, 0x51, 0x49, 0x46, 0x00},// 2
{0x21, 0x41, 0x45, 0x4B, 0x31, 0x00},// 3
{0x18, 0x14, 0x12, 0x7F, 0x10, 0x00},// 4
{0x27, 0x45, 0x45, 0x45, 0x39, 0x00},// 5
{0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00},// 6
{0x01, 0x71, 0x09, 0x05, 0x03, 0x00},// 7
{0x36, 0x49, 0x49, 0x49, 0x36, 0x00},// 8
{0x06, 0x49, 0x49, 0x29, 0x1E, 0x00},// 9
{0x00, 0x36, 0x36, 0x00, 0x00, 0x00},// :
{0x00, 0x56, 0x36, 0x00, 0x00, 0x00},// ;
{0x00, 0x08, 0x14, 0x22, 0x41, 0x00},// <
{0x14, 0x14, 0x14, 0x14, 0x14, 0x00},// =
{0x41, 0x22, 0x14, 0x08, 0x00, 0x00},// >
{0x02, 0x01, 0x51, 0x09, 0x06, 0x00},// ?
{0x32, 0x49, 0x79, 0x41, 0x3E, 0x00},// @
{0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00},// A
{0x7F, 0x49, 0x49, 0x49, 0x36, 0x00},// B
{0x3E, 0x41, 0x41, 0x41, 0x22, 0x00},// C
{0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00},// D
{0x7F, 0x49, 0x49, 0x49, 0x41, 0x00},// E
{0x7F, 0x09, 0x09, 0x01, 0x01, 0x00},// F
{0x3E, 0x41, 0x41, 0x51, 0x32, 0x00},// G
{0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00},// H
{0x00, 0x41, 0x7F, 0x41, 0x00, 0x00},// I
{0x20, 0x40, 0x41, 0x3F, 0x01, 0x00},// J
{0x7F, 0x08, 0x14, 0x22, 0x41, 0x00},// K
{0x7F, 0x40, 0x40, 0x40, 0x40, 0x00},// L
{0x7F, 0x02, 0x04, 0x02, 0x7F, 0x00},// M
{0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00},// N
{0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00},// O
{0x7F, 0x09, 0x09, 0x09, 0x06, 0x00},// P
{0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00},// Q
{0x7F, 0x09, 0x19, 0x29, 0x46, 0x00},// R
{0x46, 0x49, 0x49, 0x49, 0x31, 0x00},// S
{0x01, 0x01, 0x7F, 0x01, 0x01, 0x00},// T
{0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00},// U
{0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00},// V
{0x7F, 0x20, 0x18, 0x20, 0x7F, 0x00},// W
{0x63, 0x14, 0x08, 0x14, 0x63, 0x00},// X
{0x03, 0x04, 0x78, 0x04, 0x03, 0x00},// Y
{0x61, 0x51, 0x49, 0x45, 0x43, 0x00},// Z
{0x00, 0x00, 0x7F, 0x41, 0x41, 0x00},// [
{0x02, 0x04, 0x08, 0x10, 0x20, 0x00},// "\"
{0x41, 0x41, 0x7F, 0x00, 0x00, 0x00},// ]
{0x04, 0x02, 0x01, 0x02, 0x04, 0x00},// ^
{0x40, 0x40, 0x40, 0x40, 0x40, 0x00},// _
{0x00, 0x01, 0x02, 0x04, 0x00, 0x00},// `
{0x20, 0x54, 0x54, 0x54, 0x78, 0x00},// a
{0x7F, 0x48, 0x44, 0x44, 0x38, 0x00},// b
{0x38, 0x44, 0x44, 0x44, 0x20, 0x00},// c
{0x38, 0x44, 0x44, 0x48, 0x7F, 0x00},// d
{0x38, 0x54, 0x54, 0x54, 0x18, 0x00},// e
{0x08, 0x7E, 0x09, 0x01, 0x02, 0x00},// f
{0x08, 0x14, 0x54, 0x54, 0x3C, 0x00},// g
{0x7F, 0x08, 0x04, 0x04, 0x78, 0x00},// h
{0x00, 0x44, 0x7D, 0x40, 0x00, 0x00},// i
{0x20, 0x40, 0x44, 0x3D, 0x00, 0x00},// j
{0x00, 0x7F, 0x10, 0x28, 0x44, 0x00},// k
{0x00, 0x41, 0x7F, 0x40, 0x00, 0x00},// l
{0x7C, 0x04, 0x18, 0x04, 0x78, 0x00},// m
{0x7C, 0x08, 0x04, 0x04, 0x78, 0x00},// n
{0x38, 0x44, 0x44, 0x44, 0x38, 0x00},// o
{0x7C, 0x14, 0x14, 0x14, 0x08, 0x00},// p
{0x08, 0x14, 0x14, 0x18, 0x7C, 0x00},// q
{0x7C, 0x08, 0x04, 0x04, 0x08, 0x00},// r
{0x48, 0x54, 0x54, 0x54, 0x20, 0x00},//
{0x04, 0x3F, 0x44, 0x40, 0x20, 0x00},// t
{0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00},// u
{0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00},// v
{0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00},// w
{0x44, 0x28, 0x10, 0x28, 0x44, 0x00},// x
{0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00},// y
{0x44, 0x64, 0x54, 0x4C, 0x44, 0x00},// z
{0x00, 0x08, 0x36, 0x41, 0x00, 0x00},// {
{0x00, 0x00, 0x7F, 0x00, 0x00, 0x00},// |
{0x00, 0x41, 0x36, 0x08, 0x00, 0x00},// }
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{124,18,17,18,124,0},   // A
{127,69,69,69,56,0},    // Á
{127,69,69,70,56,0},    // Â
{127,1,1,1,3,0},        // Ã
{192,126,65,127,192,0}, // Ä
{127,73,73,67,96,0},    // Å
{119,8,127,8,119,0},    // Æ
{34,65,73,73,54,0},     // Ç
{127,32,16,8,127,0},    // È
{127,32,19,8,127,0},    // É
{127,8,20,34,65,0},     // K
{64,60,2,1,127,0},      // Ë
{127,2,12,2,127,0},     // M
{127,8,8,8,127,0},      // Í
{62,65,65,65,62,0},     // O
{127,1,1,1,127,0},      // Ï
{127,9,9,9,6,0},        // Ð
{62,65,65,65,34,0},     // Ñ
{3,1,127,1,3,0},        // Ò
{7,72,72,72,63,0},      // Ó
{14,17,127,17,14,0},    // Ô
{99,20,8,20,99,0},      // Õ
{127,64,64,64,127,192}, // Ö
{7,8,8,8,127,0},        // ×
{127,64,120,64,127,0},  // Ø
{127,64,120,64,127,192},// Ù
{1,127,72,72,48,0},     // Ú
{127,72,48,0,127,0},    // Û
{0,127,72,72,48,0},     // Ü
{34,65,73,73,62,0},     // Ý
{127,8,62,65,62,0},     // Þ
{70,41,25,9,127,0},     // ß
{32,84,84,84,120,0},    // a
{56,84,84,82,32,0},     // á
{124,84,84,84,40,0},    // â
{124,4,4,4,12,0},       // ã
{192,120,68,124,192,0}, // ä
{56,84,84,84,24,0},     // å
{108,16,124,16,108,0},  // æ
{40,68,84,84,40,0},     // ç
{124,32,16,8,124,0},    // è
{124,32,22,8,124,0},    // é
{124,32,16,40,68,0},    // k
{64,48,8,4,124,0},      // ë
{124,8,16,8,124,0},     // ì
{124,16,16,16,124,0},   // í
{56,68,68,68,56,0},     // o
{124,4,4,4,124,0},      // ï
{252,36,36,36,24,0},    // ð
{56,68,68,68,40,0},     // ñ
{12,4,124,4,12,0},      // ò
{28,160,160,160,124,0}, // ó
{24,36,126,36,24,0},    // ô
{68,40,16,40,68,0},     // õ
{124,64,64,64,124,192}, // ö
{28,32,32,32,124,0},    // ÷
{124,64,112,64,124,0},  // ø
{124,64,112,64,124,192},// ù
{4,124,80,80,32,0},     // ú
{124,80,32,0,124,0},    // û
{124,80,80,80,32,0},    // ü
{40,68,84,84,56,0},     // ý
{124,16,56,68,56,0},    // þ
{88,36,36,36,124,0},    // ÿ
{0,96,96,0,0,0},		// .
{0,32,224,0,0,0}	    // ,
};

 int x=x1*6,e,i;
 unsigned char d;
 
     d=chr-32;
     if(d>159) d=d-64;
       for(i=0;i<6;i++)
          {
           if(x<64) GLCD_CS1H,GLCD_CS2L,e=x;
           if(x>63) GLCD_CS1L,GLCD_CS2H,e=x-64;
		   comand(184+y1);
           comand(64+e);
           if(q==0) date(font5x7[d][i]);
           if(q==1) date(255-font5x7[d][i]);
           x=x+1;
          }
    
    d=0;
}
/******** clear ************/
void Gstr(int x1,int y1,unsigned char *str,int q)
{
while(*str!='\0')
{
Gchar(x1,y1,*str,q);
*str++;
x1++;
}
}
void clear(void)
{
 int i,t;
 GLCD_CS1H;
 GLCD_CS2H;
 for(i=0;i<8;i++)
 {
 comand(184+i);
 for(t=0;t<64;t++)
 {
 comand(64+t);
 date(0x00);
 }
 }
}
/*************Glb******************/
void labal(void)
{ 
 int sim[][8]={
 {240,248,252,254,255,255,255,255},
 {255,255,255,255,255,255,255,255},
{255,255,255,255,255,255,255,255},
 {255,255,255,255,127,63,31,15},
 {255,255,255,255,255,255,255,255},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{15,31,63,127,255,255,255,255},
{255,255,255,255,255,255,255,255},
{255,255,255,255,255,255,255,255},
{255,255,255,255,254,252,248,240},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{254,254,254,254,254,254,254,254},
{240,248,252,254,255,255,255,255},
 {255,255,255,255,255,255,255,255},
{255,255,255,255,255,255,255,255},
 {255,255,255,255,127,63,31,15}
 };
 int x,e=0,i,z,t,y;

x=24;
	y=1;

 for(t=0;t<20;t++){
      for(i=0;i<8;i++)
          {
           GLCD_CS1H,GLCD_CS2L;
           //if(x>63) GLCD_CS1L,GLCD_CS2H;//
           comand(184+y);
           comand(64+x);
           date(sim[t][i]);
           x=x+1;
          }
		  
   if(x>48){ 
	x=24;
	y=y+1;
	}
}	
box(0,127,0,63)	;
Gstr(10,3,"ONTROL",0);
Gstr(10,5,"YSTEM",0);
}

void slaider(int sl){
int sly[8]={255,255,255,255,255,255,255,0};
int x=1,e,i,y=6,t,z;
if(sl>16) sl=16;
if(sl<0) sl=0;
     for(t=0;t<sl;t++){
       for(i=0;i<8;i++)
          {
           if(x<64) GLCD_CS1H,GLCD_CS2L,e=x;
           if(x>63) GLCD_CS1L,GLCD_CS2H,e=x-64;
		   comand(184+y);
           comand(64+e);
           date(sly[i]);
           x=x+1;
           
          }
       
    }
for(i=0;i<8;i++)
          {
           if(x<64) GLCD_CS1H,GLCD_CS2L,e=x;
           if(x>63) GLCD_CS1L,GLCD_CS2H,e=x-64;
		   comand(184+y);
           comand(64+e);
           date(0x00);
           x=x+1;
           
          }  

}
